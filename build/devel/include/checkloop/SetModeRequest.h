// Generated by gencpp from file checkloop/SetModeRequest.msg
// DO NOT EDIT!


#ifndef CHECKLOOP_MESSAGE_SETMODEREQUEST_H
#define CHECKLOOP_MESSAGE_SETMODEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace checkloop
{
template <class ContainerAllocator>
struct SetModeRequest_
{
  typedef SetModeRequest_<ContainerAllocator> Type;

  SetModeRequest_()
    : localize(false)
    , map(false)
    , applyChange(false)  {
    }
  SetModeRequest_(const ContainerAllocator& _alloc)
    : localize(false)
    , map(false)
    , applyChange(false)  {
  (void)_alloc;
    }



   typedef uint8_t _localize_type;
  _localize_type localize;

   typedef uint8_t _map_type;
  _map_type map;

   typedef uint8_t _applyChange_type;
  _applyChange_type applyChange;




  typedef boost::shared_ptr< ::checkloop::SetModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::checkloop::SetModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetModeRequest_

typedef ::checkloop::SetModeRequest_<std::allocator<void> > SetModeRequest;

typedef boost::shared_ptr< ::checkloop::SetModeRequest > SetModeRequestPtr;
typedef boost::shared_ptr< ::checkloop::SetModeRequest const> SetModeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::checkloop::SetModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::checkloop::SetModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace checkloop

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/indigo/share/nav_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::checkloop::SetModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::checkloop::SetModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::checkloop::SetModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::checkloop::SetModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::checkloop::SetModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::checkloop::SetModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::checkloop::SetModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "70da9f49c8aff1c1eadda36f4cb53efb";
  }

  static const char* value(const ::checkloop::SetModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x70da9f49c8aff1c1ULL;
  static const uint64_t static_value2 = 0xeadda36f4cb53efbULL;
};

template<class ContainerAllocator>
struct DataType< ::checkloop::SetModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "checkloop/SetModeRequest";
  }

  static const char* value(const ::checkloop::SetModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::checkloop::SetModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool localize\n\
bool map\n\
bool applyChange\n\
";
  }

  static const char* value(const ::checkloop::SetModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::checkloop::SetModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.localize);
      stream.next(m.map);
      stream.next(m.applyChange);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::checkloop::SetModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::checkloop::SetModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "localize: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.localize);
    s << indent << "map: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.map);
    s << indent << "applyChange: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.applyChange);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHECKLOOP_MESSAGE_SETMODEREQUEST_H
